// Runs the main game

package com.example.namethattune;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnPreparedListener;
import android.os.Bundle;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.RemoteViews;
import android.widget.Toast;
 

public class PlayGameActivity extends Activity implements View.OnClickListener{
	Activity context;
	String[] songNames;
	String category;
	int questionNum=0;
	int[] questionArray;
	int score=0;
	
	Button button1;
	Button button2;
	Button button3;
	Button button4;
	
	MediaPlayer mp;
	
	RemoteViews remoteViews;
	

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_play_game);

		// Gets the intent from MainActivity
		Intent intent = getIntent();
		category = intent.getStringExtra("category");
		songNames = intent.getStringArrayExtra("songNames");
		context = this;
		
		remoteViews = new RemoteViews(getPackageName(), R.layout.activity_play_game);
		
		// Initialize buttons
		button1 = (Button) findViewById(R.id.button1);
		button2 = (Button) findViewById(R.id.button2);
		button3 = (Button) findViewById(R.id.button3);
		button4 = (Button) findViewById(R.id.button4);
		
		// Sets onClickListeners to all the buttons
		button1.setOnClickListener(this);
		button2.setOnClickListener(this);
		button3.setOnClickListener(this);
		button4.setOnClickListener(this);
		
		questionArray=generateQuestions(15);
		nextSong(questionArray[questionNum]);
	}
	
	private void startPlayer(int song) {
		// Starts MediaPlayer with the specified song
		mp = MediaPlayer.create(context, song);
		mp.setOnPreparedListener(new OnPreparedListener() {
			
			// Starts the MediaPlayer after it has been prepared
			@Override
			public void onPrepared(MediaPlayer player) {
				try {
					player.start();
				}
				catch (NullPointerException e){
				}
				catch (IllegalStateException e) {
				}
			}
		});
		
		// Releases the MediaPlayer once the song has finished playing
		mp.setOnCompletionListener (new OnCompletionListener() {

			@Override
			public void onCompletion(MediaPlayer arg0) {
				// TODO Auto-generated method stub
				mp.release();
			}
			
		});
	}
	
	private void stopPlayer() {
		// Stops the MediaPlayer
		try {
			if (mp.isPlaying()) {
				mp.stop();
				mp.reset();
				mp.release();
			}
		}
		catch (IllegalStateException e) {
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.play_game, menu);
		return true;
	}

	@Override
	public void onClick(View v) {
		stopPlayer();
		
		String message;
		Button answer = (Button) v;

		// Gets the correct answer
		String correct = songNames[questionArray[questionNum]];
		
		// Sets the message depending on whether the user is correct
		// Increases the score if the user is correct
		if ((answer.getText().toString().trim()).equals(correct)) {
			message = "Correct!";
			score++;
		}
		
		else {
			message = "Incorrect! The correct answer is "+correct;
		}
		
		questionNum++;
		
		// Creates and shows a dialog that tells the user if they are correct
		AlertDialog alert = new AlertDialog.Builder(this).create();
		alert.setMessage(message);
		alert.setButton(AlertDialog.BUTTON_POSITIVE, "Continue", new DialogInterface.OnClickListener() {
			
			public void onClick (DialogInterface dialog, int id) {
				// Performs actions when the button is clicked
				
				// If there are still more questions, the next question is shown
				if (questionNum<5){
					nextSong(questionArray[questionNum]);
				}
				
				// Goes back to the main screen if there are no more questions
				else {
					startNewActivity();
					finish();
				}
			}
		});
		alert.show();
		
		
		
	}
	
	private int getId(int song) {
		// Gets the id of the media file
		/* @param song		The index of the song
		 * @return			The id of the resource
		 */
		String id;
		
		// The name of the resource changes depending on whether the index is a single or double digit
		if (song <10) {
			id=category+"0"+song;
		}
		else {
			id=category+song;
		}
		
		return getResources().getIdentifier(id, "raw", getPackageName());
	}
	
	private int[] generateQuestions(int range) {
		// Generates an array in the indices of the songs to be played
		/* @param range			The number of songs available to choose from
		 * @return				An array of the indices of the songs
		 */
		
		int[] songArray = new int[5];
		int song=0;
		
		// Creates 5 songs
		for (int i = 0; i<5; i++) {
			
			// Ensures there are no duplicate questions
			do {
				song=(int)(Math.random()*range);
			}
			while (isTaken(songArray,song));
			songArray[i]=song;
		}
		return songArray;
		
	}
    
	private void setButtonText() {
		// Sets the button text to the choices
		try {
		
			String []choices = createChoices(songNames, questionArray[questionNum]);
			
			button1.setText(choices[0]);
			button2.setText(choices[1]);
			button3.setText(choices[2]);
			button4.setText(choices[3]);
		}
		catch (NullPointerException e) {
		}
	}
    
	private void nextSong(int song){
		// Sets the button text with the choices of the next song
		// Starts playing the next song
		setButtonText();
		startPlayer(getId(song));
	}
    
	
	private String[] createChoices (String[] songNames, int answer) {
		// Creates a string array to display in the multiple choice
		/* @param songNames		A string array of song names to pick from
		 * @param answer		The index of the correct answer
		 * @return				A string array of song names (including that of the answer)
		 */
		int range = songNames.length;
		int [] usedChoices = new int [4];
		String[] songs=new String[4];
		
		// Puts the answer in a random spot
		int a=(int)(Math.random()*4);
		songs[a]=songNames[answer];
		usedChoices[a]=answer;
		
		// Creates 4 choices
		for (int i=0;i<4;i++) {
			
			// Ensures the answer isn't overwritten
			if (songs[i]==null){
				
				// Ensures there are no duplicate choices
				do {
					a=(int)(Math.random()*range);
				}
				while (isTaken(usedChoices, a));
				songs[i]=songNames[a];
				usedChoices[i]=a;
			}
		}
		return songs;
		
	}
	
	private boolean isTaken (int[] intArray, int search) {
		// Checks if an integer is already in an array
		/* @param intArray		The array to be searched
		 * @param search		The search term to check with
		 * @return				true if the search term is found, false if not
		 */
		
		// Checks every element and returns true if it matches the search term
		for (int i : intArray) {
			if(i==search) {
				return true;
			}
		}
		return false;
	}
	
	private void startNewActivity() {
		// Starts the ScoreActivity
		// Sends ScoreActivity the score
		
    	Intent intent = new Intent(context, ScoreActivity.class);
		intent.putExtra("score", score);
    	startActivity(intent);
    }
}
